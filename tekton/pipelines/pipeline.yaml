apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: hello-pipeline
spec:
  workspaces:
  - name: playbooks
    description: |
      This workspace will contain ansible playbooks
  - name: inventories
    description: |
      This workspace will contain ansible inventories
  tasks:
    - name: pipeline-hello-task
      taskRef:
        name: hello-task
    - name: get-inventories
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: inventories
      params:
#TODO: Replace url and revision with params
      - name: url
        value: https://github.com/tylerauerbeck/devconf21-infracicd
      - name: revision
        value: "main"
      - name: deleteExisting
        value: "true"
    - name: get-playbooks
      taskRef:
        name: git-clone
      workspaces:
      - name: output
        workspace: playbooks
      params:
#TODO: Replace url and revision with params
      - name: url
        value: https://github.com/redhat-cop/infra-ansible
      - name: revision
        value: "v2.0.4"
      - name: deleteExisting
        value: "true"
    - name: lint-dns
      workspaces:
      - name: output
        workspace: playbooks
      taskRef:
        name: ansible-lint
      params:
        - name: SKIP_LIST
          value: "106,206,208,301,303,305"
        - name: ARGS
          value: ["$(workspaces.output.path)/roles/dns/config-dns-server-bind/"]
      runAfter:
        - get-inventories
        - get-playbooks
    - name: generate-keys
      taskRef:
        name: generate-ssh-keys
      params:
        - name: publicKeySecretName
          value: dns-test-pub-$(context.pipelineRun.uid)
        - name: privateKeySecretName
          value: dns-test-priv-$(context.pipelineRun.uid)
    - name: create-vm
      taskRef:
        name: create-vm-from-manifest
      params:
        - name: manifest
          value: |
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              labels:
                kubevirt.io/vm: vm-fedora
              generateName: vm-fedora-
            spec:
              running: true 
              template:
                metadata:
                  labels:
                    kubevirt.io/vm: vm-fedora
                spec:
                  accessCredentials:
                    - sshPublicKey:
                        source:
                          secret:
                            secretName: $(tasks.generate-keys.results.publicKeySecretName)
                        propagationMethod:
                          configDrive: {}
                  readinessProbe:
                    tcpSocket:
                      port: 22
                    initialDelaySeconds: 120
                    periodSeconds: 30
                    timeoutSeconds: 10
                    failureThreshold: 10
                    successThreshold: 1
                  networks:
                  - name: default
                    pod: {}
                  domain:
                    devices:
                      interfaces:
                        - name: default
                          masquerade: {}
                      disks:
                      - disk:
                          bus: virtio
                        name: containerdisk
                      - disk:
                          bus: virtio
                        name: cloudinitdisk
                      rng: {}
                    machine:
                      type: ""
                    resources:
                      requests:
                        memory: 2Gi
                        cpu: "2"
                  terminationGracePeriodSeconds: 0
                  volumes:
                  - containerDisk:
                      image: kubevirt/fedora-cloud-container-disk-demo:v0.32.0
                    name: containerdisk
                  - name: cloudinitdrive
                      cloudInitConfigDrive:
                        userData: |
                          #cloud-config
                          password: fedora
                          hostname: fedora
                          chpasswd: { expire: False }
                          ssh_pwauth: True
                          disable_root: false
      runAfter:
        - lint-dns
        - generate-keys
    - name: wait-for-vm
      taskRef:
        name: wait-for-vmi-status
      params:
        - name: vmiName
          value: "$(tasks.create-vm.results.name)"
        - name: successCondition
          value: "status.phase == Running"
        - name: failureCondition
          value: "status.phase != Running"
      runAfter:
        - create-vm
